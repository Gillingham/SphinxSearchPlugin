####################################################################
# This file is automatically generated by the SphinxSearch Plugin  #
# -@author mcuhq 												   #	
####################################################################


#create an offset from the `{ss_prefix}discussion`

source {ss_prefix}main_comment
{
    type            = mysql
    sql_host        = {sql_host}
    sql_user        = {sql_user}
    sql_pass        = {sql_pass}
    sql_db          = mysql         #must be this for now
    sql_port        = 3306    #optional, default is 3306

    sql_query_pre   = SET NAMES {charset_type_mysql}
    sql_query_pre   = REPLACE INTO {db_prefix}sph_counter SELECT 1, MAX((c.CommentID +1 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d))) FROM {db_prefix}Comment as c
    sql_query       = SELECT  (c.CommentID +1 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d)), c.CommentID as CommentID, 1 as TableID, c.DiscussionID as CommentDiscussionID, c.InsertUserID as CommentInsertUserID, c.UpdateUserID as CommentUpdateUserID, \
            c.Body as CommentBody, UNIX_TIMESTAMP(c.DateInserted) as CommentDateInserted, UNIX_TIMESTAMP(c.DateUpdated) as CommentDateUpdated,\
\
            cat.CategoryID as CatID, cat.ParentCategoryID as CatParentID, cat.Depth as CatDepth, cat.CountDiscussions as CatCountDiscussions,\
            cat.CountComments as CatCountComments, cat.Name as CatName, cat.UrlCode as CatUrlCode, cat.Description as CatDescription,\
            cat.LastCommentID as CatLastCommentID, cat.LastDiscussionID as CatLastDiscussionID,\
\
            0 as DiscussionName, d.Name as DiscussionNameAttr, d.CountComments as DiscussionCountComments, d.CountViews as DiscussionCountViews,\
            UNIX_TIMESTAMP(d.DateUpdated) as DiscussionDateUpdated, d.LastCommentUserID as DiscussionLastCommentUserID,\
            d.DiscussionID as DiscussionID, UNIX_TIMESTAMP(d.DateInserted) as DiscussionDateInserted,\
\
            u.Name as UserName, u.Photo as UserPhoto, u.UserID as UserID\
\
            FROM {db_prefix}Comment as c\
\
            INNER JOIN {db_prefix}Discussion as d ON c.DiscussionID = d.DiscussionID\
            INNER JOIN {db_prefix}Category as cat ON d.CategoryID = cat.CategoryID\
            INNER JOIN {db_prefix}User as u ON c.InsertUserID = u.UserID\
\
            WHERE (c.CommentID +1 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d)) <=( SELECT max_doc_id FROM {db_prefix}sph_counter WHERE counter_id=1 )\


    # Field strings are BOTH indexed AND stored

    sql_field_string = CommentBody
    sql_field_string = DiscussionName
    sql_field_string = UserName

    sql_attr_string = DiscussionNameAttr


    # Attributes are NOT indexed, but stored

    sql_attr_timestamp =DiscussionDateInserted
    sql_attr_uint = DiscussionCountViews
    sql_attr_uint = DiscussionCountComments
    sql_attr_uint = DiscussionID
    sql_attr_uint = CommentID
    sql_attr_uint = TableID        #distinguishes between a discussion/comment



    sql_attr_timestamp = CommentDateInserted
    sql_attr_uint = CatID
    sql_attr_string = CatName
    sql_attr_string = CatUrlCode

    sql_attr_string = UserPhoto
    sql_attr_uint = UserID

}

source {ss_prefix}delta_comment : {ss_prefix}main_comment
{

    sql_query_pre = SET NAMES {charset_type_mysql}

    sql_query   = SELECT  (c.CommentID +1 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d)), c.CommentID as CommentID, 1 as TableID, c.DiscussionID as CommentDiscussionID, c.InsertUserID as CommentInsertUserID, c.UpdateUserID as CommentUpdateUserID, \
            c.Body as CommentBody, UNIX_TIMESTAMP(c.DateInserted) as CommentDateInserted, UNIX_TIMESTAMP(c.DateUpdated) as CommentDateUpdated,\
\
            cat.CategoryID as CatID, cat.ParentCategoryID as CatParentID, cat.Depth as CatDepth, cat.CountDiscussions as CatCountDiscussions,\
            cat.CountComments as CatCountComments, cat.Name as CatName, cat.UrlCode as CatUrlCode, cat.Description as CatDescription,\
            cat.LastCommentID as CatLastCommentID, cat.LastDiscussionID as CatLastDiscussionID,\
\
            0 as DiscussionName, d.Name as DiscussionNameAttr, d.CountComments as DiscussionCountComments, d.CountViews as DiscussionCountViews,\
            UNIX_TIMESTAMP(d.DateUpdated) as DiscussionDateUpdated, d.LastCommentUserID as DiscussionLastCommentUserID,\
            d.DiscussionID as DiscussionID, UNIX_TIMESTAMP(d.DateInserted) as DiscussionDateInserted,\
\
            u.Name as UserName, u.Photo as UserPhoto, u.UserID as UserID\
            FROM {db_prefix}Comment as c\
            INNER JOIN {db_prefix}Discussion as d ON c.DiscussionID = d.DiscussionID\
            INNER JOIN {db_prefix}Category as cat ON d.CategoryID = cat.CategoryID\
            INNER JOIN {db_prefix}User as u ON c.InsertUserID = u.UserID\
\
            WHERE (c.CommentID +1 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d)) > (SELECT max_doc_id FROM {db_prefix}sph_counter WHERE counter_id=1)\

}

#this source selects the discussion body  and its related info, exactly like the `{ss_prefix}comments` does.
#the discussion body is refered to as a comment to fit with the rest of the naming scheme
#yes, there are duplicate attributes stored, but the two sources MUST match columns(see MYSQL UNION)

source {ss_prefix}main_discussion
{
    type            = mysql
    sql_host        = {sql_host}
    sql_user        = {sql_user}
    sql_pass        = {sql_pass}
    sql_db          = mysql         #must be this for now
    sql_port        = 3306    #optional, default is 3306

    sql_query_pre   = SET NAMES {charset_type_mysql}
    sql_query_pre   = REPLACE INTO {db_prefix}sph_counter SELECT 2, (1 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d)) FROM {db_prefix}Discussion as d
    sql_query       = SELECT  d.DiscussionID as CommentID, d.DiscussionID as CommentID, 2 as TableID, d.DiscussionID as CommentDiscussionID, d.InsertUserID as CommentInsertUserID, d.UpdateUserID as CommentUpdateUserID, \
            d.Body as CommentBody, UNIX_TIMESTAMP(d.DateInserted) as CommentDateInserted, UNIX_TIMESTAMP(d.DateUpdated) as CommentDateUpdated,\
\
            cat.CategoryID as CatID, cat.ParentCategoryID as CatParentID, cat.Depth as CatDepth, cat.CountDiscussions as CatCountDiscussions,\
            cat.CountComments as CatCountComments, cat.Name as CatName, cat.UrlCode as CatUrlCode, cat.Description as CatDescription,\
            cat.LastCommentID as CatLastCommentID, cat.LastDiscussionID as CatLastDiscussionID,\
\
            d.Name as DiscussionName, d.Name as DiscussionNameAttr,\
            d.CountComments as DiscussionCountComments, d.CountViews as DiscussionCountViews, UNIX_TIMESTAMP(d.DateUpdated) as DiscussionDateUpdated, d.LastCommentUserID as DiscussionLastCommentUserID,\
            d.DiscussionID as DiscussionID, UNIX_TIMESTAMP(d.DateInserted) as DiscussionDateInserted,\
\
            u.Name as UserName, u.Photo as UserPhoto, u.UserID as UserID\
            FROM {db_prefix}Discussion as d\
            INNER JOIN {db_prefix}Category as cat ON d.CategoryID = cat.CategoryID\
            INNER JOIN {db_prefix}User as u ON d.InsertUserID = u.UserID\
            WHERE (1 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d)) <= (SELECT max_doc_id FROM {db_prefix}sph_counter WHERE counter_id=2)\

    # Field strings are BOTH indexed AND stored

    sql_field_string = CommentBody
    sql_field_string = DiscussionName
    sql_field_string = UserName

    sql_attr_string = DiscussionNameAttr

    # Attributes are NOT indexed, but stored

    sql_attr_timestamp =DiscussionDateInserted
    sql_attr_uint = DiscussionCountViews
    sql_attr_uint = DiscussionCountComments
    sql_attr_uint = DiscussionID
    sql_attr_uint = CommentID
    sql_attr_uint = TableID	#distinguishes between a discussion/comment



    sql_attr_timestamp = CommentDateInserted
    sql_attr_uint = CatID
    sql_attr_string = CatName
    sql_attr_string = CatUrlCode

    sql_attr_string = UserPhoto
    sql_attr_uint = UserID



}
source {ss_prefix}delta_discussion : {ss_prefix}main_discussion
{
    sql_query_pre = SET NAMES {charset_type_mysql}
    sql_query = SELECT  d.DiscussionID as CommentID, d.DiscussionID as CommentID, 2 as TableID, d.DiscussionID as CommentDiscussionID, d.InsertUserID as CommentInsertUserID, d.UpdateUserID as CommentUpdateUserID, \
            d.Body as CommentBody, UNIX_TIMESTAMP(d.DateInserted) as CommentDateInserted, UNIX_TIMESTAMP(d.DateUpdated) as CommentDateUpdated,\
\
            cat.CategoryID as CatID, cat.ParentCategoryID as CatParentID, cat.Depth as CatDepth, cat.CountDiscussions as CatCountDiscussions,\
            cat.CountComments as CatCountComments, cat.Name as CatName, cat.UrlCode as CatUrlCode, cat.Description as CatDescription,\
            cat.LastCommentID as CatLastCommentID, cat.LastDiscussionID as CatLastDiscussionID,\
\
            d.Name as DiscussionName, d.Name as DiscussionNameAttr,\
            d.CountComments as DiscussionCountComments, d.CountViews as DiscussionCountViews, UNIX_TIMESTAMP(d.DateUpdated) as DiscussionDateUpdated, d.LastCommentUserID as DiscussionLastCommentUserID,\
            d.DiscussionID as DiscussionID, UNIX_TIMESTAMP(d.DateInserted) as DiscussionDateInserted,\
\
            u.Name as UserName, u.Photo as UserPhoto, u.UserID as UserID\
            FROM {db_prefix}Discussion as d\
            INNER JOIN {db_prefix}Category as cat ON d.CategoryID = cat.CategoryID\
            INNER JOIN {db_prefix}User as u ON d.InsertUserID = u.UserID\
			WHERE (0 + (SELECT MAX(d.DiscussionID) FROM {db_prefix}Discussion as d)) > (SELECT max_doc_id FROM {db_prefix}sph_counter WHERE counter_id=2)\

}

 index {ss_prefix}main
{
    source          = {ss_prefix}main_comment
    source          = {ss_prefix}main_discussion
    path            = {install_path}{DS}sphinx{DS}var{DS}data{DS}{ss_prefix}main
    docinfo         = extern
    charset_type    = {charset_type}


    min_infix_len = 0
    min_word_len = 3
    min_stemming_len = 1
    morphology = stem_en
    enable_star = 0
    #stopwords = {install_path}{DS}stopwords.txt

}
index {ss_prefix}delta : {ss_prefix}main
{
    source          = {ss_prefix}delta_comment
    source          = {ss_prefix}delta_discussion
    path            = {install_path}{DS}sphinx{DS}var{DS}data{DS}{ss_prefix}delta
}


index vanilla
{
    type            =  distributed
    local           =  {ss_prefix}main
    local           =  {ss_prefix}delta
}




indexer
{
    mem_limit       = {mem_limit}
}

searchd
{
    port            = {searchd_port}
    log             = {install_path}{DS}sphinx{DS}var{DS}log{DS}search.log
    query_log       = {install_path}{DS}sphinx{DS}var{DS}log{DS}query.log
    read_timeout    = 5
    max_children    = 30
    pid_file        = {install_path}{DS}sphinx{DS}var{DS}log{DS}search.pid
    max_matches     = {max_matches}

    compat_sphinxql_magics = 0 # the future is now
}

# --eof--